#!/bin/sh

success() {
  echo "ðŸŽ‰ => $1"
}

install_package() {
    if [ "$system_type" = "Linux" ] && [ -f /etc/os-release ] && grep -q "^ID=ubuntu" /etc/os-release; then
	sudo apt update
        sudo apt install "$1"
    elif [ "$system_type" = "Darwin" ]; then
        brew install "$1"
    else
        echo "Unsupported operating system"
        exit 1
    fi
}


# Updating the yadm repo origin URL for using ssh
yadm remote set-url origin "git@github.com:AdithyanA2005/dotfiles.git"


# GET THE TYPE OF THE SYSTEM (Darwin, Linux)
system_type=$(uname -s)


# INIT GIT SUBMODULES
# Because Git submodule commands cannot operate without a work tree, they must
# be run from within $HOME (assuming this is the root of your dotfiles)
# cd "$HOME"
# echo "\nYADM SUBMODULE INIT"
# yadm submodule update --recursive --init



# INSTALL HOMEBREW - FOR MACOS
if [ "$system_type" = "Darwin" ]; then
    if ! command -v brew >/dev/null 2>&1; then
	echo "Installing Homebrew"
	/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
	success "Successfully installed - homebrew"
    fi
fi




# INSTALL LOLCAT
if ! command -v lolcat >/dev/null 2>&1; then
    echo "\nINSTALLING LOLCAT"
    install_package lolcat
    success "Successfully installed - lolcat"
fi

# INSTALL ZSH
if ! command -v zsh >/dev/null 2>&1; then
    echo "\nINSTALLING ZSH"
    install_package zsh
    success "Successfully installed - zsh"
fi

# INSTALL GIT
if ! command -v git >/dev/null 2>&1; then
    echo "\nINSTALLING GIT"
    install_package git
    success "Successfully installed - git"
fi

# INSTALL CURL
if ! command -v curl >/dev/null 2>&1; then
    echo "\nINSTALLING CURL"
    install_package curl
    success "Successfully installed - curl"
fi

# INSTALL PYTHON
if ! command -v python3 >/dev/null 2>&1; then
    echo "\nINSTALLING PYTHON3"
    install_package python3
    success "Successfully installed - python3"
fi







# INSTALL RUBY
echo "\nINSTALLING RUBY"
if [ "$system_type" = "Linux" ] && [ -f /etc/os-release ] && grep -q "^ID=ubuntu" /etc/os-release; then
    sudo apt update
    sudo apt install ruby-full build-essential
elif [ "$system_type" = "Darwin" ]; then
    brew install ruby
else
    echo "Unsupported operating system"
    exit 1
fi
success "Successfully installed - ruby"

# INSTALL COLORLS
if ! command -v colorls >/dev/null 2>&1; then
    echo "\nINSTALLING COLORLS"
    sudo gem install colorls
    success "Successfully installed - colorls"
fi





# SET ZSH AS DEFAULT SHELL
if [ "$(basename "$SHELL")" != "zsh" ]; then
    echo "\nSETTING ZSH AS DEFAULT SHELL"
    chsh -s $(which zsh)  # Set zsh as the default shell for the current user
    success "ZSH Set as default shell"
fi




# INSTALL ZSH PLUGINS
plugins_dir=~/.config/zsh/plugins  # Base dir to install zsh plugins
mkdir -p $plugins_dir # Create plugins_dir if it does not exists

if [ ! -d $plugins_dir/zsh-autosuggestions ]; then
    echo "\nINSTALLING ZSH AUTOSUGGESTIONS"
    git clone https://github.com/zsh-users/zsh-autosuggestions $plugins_dir/zsh-autosuggestions
    success "Successfully Installed - zsh autosuggestions plugin"
fi


if [ ! -d $plugins_dir/zsh-syntax-highlighting ]; then
    echo "\nINSTALLING ZSH SYNTAX HIGHLIGHTING"
    git clone https://github.com/zsh-users/zsh-syntax-highlighting $plugins_dir/zsh-syntax-highlighting
    success "Successfully Installed - zsh syntax highlighting plugin"
fi

if [ ! -d $plugins_dir/zsh-completions ]; then
    echo "\nINSTALLING ZSH COMPLETIONS"
    git clone https://github.com/zsh-users/zsh-completions $plugins_dir/zsh-completions
    success "Successfully Installed - zsh completions plugin"
fi





# SETUP P10K THEME
themes_dir=~/.config/zsh/themes  # Base dir to install zsh themes
mkdir -p $themes_dir # Create themes_dir if it does not exists

if [ ! -d $themes_dir/powerlevel10k ]; then
    echo "\nINSTALLING POWERLEVEL10K THEME"
    git clone --depth=1 https://github.com/romkatv/powerlevel10k.git $themes_dir/powerlevel10k
    success "Successfully Installed - p10k theme"
fi




# INSTALL NVM 
if [ ! -d $HOME/.nvm ]; then
    echo "\nINSTALLING NODE VERSION MANAGER"
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
    success "Successfully Installed - Node Version Manager"
fi




echo "\n\nNOTE: If you are using wsl consider running:\nyadm config local.os Linux\nyadm alt"
echo
success "NOW RESTART THE TERMINAL TO SEE CHANGES"
